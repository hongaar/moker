import { Argv, PositionalOptions } from 'yargs';
import { BaseArg, BaseArgOptions } from './baseArg.js';
declare type IgnoreOptions = 'array' | 'conflicts' | 'demandOption' | 'desc' | 'describe' | 'implies' | 'normalize';
export interface ArgumentOptions extends Omit<PositionalOptions, IgnoreOptions>, BaseArgOptions {
    optional?: true;
    variadic?: true;
}
export declare function argument(name: string, options?: ArgumentOptions): Argument;
export declare const defaultOptions: ArgumentOptions;
export declare class Argument extends BaseArg {
    protected options: ArgumentOptions;
    constructor(name: string, options?: ArgumentOptions);
    configure(options: ArgumentOptions): this;
    isOptional(): true | undefined;
    isVariadic(): true | undefined;
    /**
     * Returns the formatted positional argument to be used in a command. See
     * https://github.com/yargs/yargs/blob/master/docs/advanced.md#positional-arguments
     */
    toCommand(): string;
    /**
     * Calls the positional() method on the passed in yargs instance and returns
     * it. See http://yargs.js.org/docs/#api-positionalkey-opt
     */
    toYargs<T>(yargs: Argv<T>): Argv<T & {
        [x: string]: unknown;
    }>;
}
export {};
