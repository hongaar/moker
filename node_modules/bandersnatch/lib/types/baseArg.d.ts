import type { InferredOptionType, Options, PositionalOptions } from 'yargs';
import type { ArgumentOptions } from './argument.js';
import type { OptionOptions } from './option.js';
export interface BaseArgOptions {
    prompt?: true | string;
}
export declare type InferArgType<O extends Options | PositionalOptions, F = unknown> = O extends {
    default: number;
} ? number : O extends {
    type: 'number';
    optional: true;
} ? number | undefined : O extends {
    type: 'number';
    variadic: true;
} ? Array<number> : O extends {
    type: 'number';
} ? number : O extends {
    default: boolean;
} ? boolean : O extends {
    type: 'boolean';
    optional: true;
} ? boolean | undefined : O extends {
    type: 'boolean';
    variadic: true;
} ? Array<boolean> : O extends {
    type: 'boolean';
} ? boolean : O extends {
    choices: ReadonlyArray<infer C>;
    type: 'array';
} ? C[] : O extends {
    choices: ReadonlyArray<infer C>;
    default: ReadonlyArray<string>;
} ? C[] : O extends {
    choices: ReadonlyArray<infer C>;
    variadic: true;
} ? C[] : O extends {
    choices: ReadonlyArray<infer C>;
    optional: true;
} ? C | undefined : O extends {
    choices: ReadonlyArray<infer C>;
} ? C : O extends {
    default: string;
} ? string : O extends {
    optional: true;
} ? string | undefined : O extends {
    variadic: true;
} ? Array<string> : unknown extends InferredOptionType<O> ? F : InferredOptionType<O>;
export declare class BaseArg {
    protected name: string;
    protected options: ArgumentOptions | OptionOptions;
    constructor(name: string);
    /**
     * Set the argument/option description.
     */
    description(description: string): this;
    /**
     * Whether this argument/option can be interactive.
     */
    isPromptable(): boolean;
    /**
     * Returns the prompt line.
     */
    getPrompt(): string;
    /**
     * Get default value, if specified.
     */
    getDefault(): any;
    /**
     * Get possible values, is specified.
     * @todo See if we can add this to autocompleter
     */
    getChoices(): import("yargs").Choices | undefined;
    /**
     * Get type, is specified.
     */
    getType(): "array" | "count" | import("yargs").PositionalOptionsType | undefined;
    /**
     * Returns the argument/option identifier.
     */
    getName(): string;
    /**
     * Returns the argument/option description.
     */
    getDescription(): string | undefined;
    /**
     * Returns the argument/option options.
     */
    getOptions(): OptionOptions | ArgumentOptions;
}
