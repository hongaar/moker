import { Argv, Options as BaseOptions } from 'yargs';
import { BaseArg, BaseArgOptions } from './baseArg.js';
declare type IgnoreOptions = 'array' | 'boolean' | 'conflicts' | 'config' | 'configParser' | 'count' | 'defaultDescription' | 'demand' | 'demandOption' | 'deprecate' | 'desc' | 'describe' | 'global' | 'group' | 'hidden' | 'implies' | 'nargs' | 'normalize' | 'number' | 'require' | 'required' | 'requiresArg' | 'skipValidation' | 'string' | 'implies';
export interface OptionOptions extends Omit<BaseOptions, IgnoreOptions>, BaseArgOptions {
}
export declare function option(name: string): Option;
export declare class Option extends BaseArg {
    protected options: OptionOptions;
    constructor(name: string, options?: OptionOptions);
    configure(options: OptionOptions): this;
    /**
     * Calls the option() method on the passed in yargs instance and returns
     * it. See http://yargs.js.org/docs/#api-positionalkey-opt
     */
    toYargs<T>(yargs: Argv<T>): Argv<T & {
        [x: string]: unknown;
    }>;
}
export {};
