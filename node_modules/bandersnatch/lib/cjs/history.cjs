"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.History = exports.history = exports.HISTSIZE = void 0;

const fs_1 = __importDefault(require("fs"));

const os_1 = __importDefault(require("os"));

exports.HISTSIZE = 500;
/**
 * Create new history instance.
 */

function history(program) {
  return new History(program);
}

exports.history = history;

class History {
  constructor(program) {
    this.program = program;
    this.path = this.program.options.historyFile;
    this.program.on('run', command => this.push(command));
  }
  /**
   * Add a new entry to the history file.
   */


  push(entry) {
    if (Array.isArray(entry)) {
      entry = entry.join(' ');
    } // Truncate if needed and if possible


    try {
      const historyContents = fs_1.default.readFileSync(this.path, 'utf8').split(os_1.default.EOL);

      if (historyContents.length > exports.HISTSIZE) {
        fs_1.default.writeFileSync(this.path, historyContents.slice(historyContents.length - exports.HISTSIZE).join(os_1.default.EOL), 'utf8');
      }
    } catch (err) {}

    fs_1.default.appendFileSync(this.path, entry + os_1.default.EOL);
  }
  /**
   * Read the history file and hydrate the REPL server history.
   */


  hydrateReplServer(server) {
    // @ts-ignore
    if (typeof server.history !== 'object') {
      return;
    }

    try {
      fs_1.default.readFileSync(this.path, 'utf-8').split(os_1.default.EOL).reverse().filter(line => line.trim()) // @ts-ignore
      .map(line => server.history.push(line));
    } catch (err) {// Ignore history file read errors
    }
  }

}

exports.History = History;
//# sourceMappingURL=history.cjs.map
