"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Argument = exports.defaultOptions = exports.argument = void 0;

const baseArg_js_1 = require("./baseArg.cjs");

function argument(name, options) {
  return new Argument(name, options);
}

exports.argument = argument;
exports.defaultOptions = {
  type: 'string'
};

class Argument extends baseArg_js_1.BaseArg {
  constructor(name, options) {
    super(name);
    this.options = {};
    this.configure(options || {});
  }

  configure(options) {
    this.options = Object.assign({
      type: 'string'
    }, options);

    if (this.isPromptable()) {
      this.options = Object.assign({
        optional: true
      }, this.options);
    }

    return this;
  }

  isOptional() {
    return this.options.optional;
  }

  isVariadic() {
    return this.options.variadic;
  }
  /**
   * Returns the formatted positional argument to be used in a command. See
   * https://github.com/yargs/yargs/blob/master/docs/advanced.md#positional-arguments
   */


  toCommand() {
    if (this.isVariadic()) {
      return `[${this.name}..]`;
    }

    if (this.isOptional()) {
      return `[${this.name}]`;
    }

    return `<${this.name}>`;
  }
  /**
   * Calls the positional() method on the passed in yargs instance and returns
   * it. See http://yargs.js.org/docs/#api-positionalkey-opt
   */


  toYargs(yargs) {
    return yargs.positional(this.name, this.options);
  }

}

exports.Argument = Argument;
//# sourceMappingURL=argument.cjs.map
