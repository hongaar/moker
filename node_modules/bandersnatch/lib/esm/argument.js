import { BaseArg } from './baseArg.js';
export function argument(name, options) {
    return new Argument(name, options);
}
export const defaultOptions = { type: 'string' };
export class Argument extends BaseArg {
    constructor(name, options) {
        super(name);
        this.options = {};
        this.configure(options || {});
    }
    configure(options) {
        this.options = Object.assign({ type: 'string' }, options);
        if (this.isPromptable()) {
            this.options = Object.assign({ optional: true }, this.options);
        }
        return this;
    }
    isOptional() {
        return this.options.optional;
    }
    isVariadic() {
        return this.options.variadic;
    }
    /**
     * Returns the formatted positional argument to be used in a command. See
     * https://github.com/yargs/yargs/blob/master/docs/advanced.md#positional-arguments
     */
    toCommand() {
        if (this.isVariadic()) {
            return `[${this.name}..]`;
        }
        if (this.isOptional()) {
            return `[${this.name}]`;
        }
        return `<${this.name}>`;
    }
    /**
     * Calls the positional() method on the passed in yargs instance and returns
     * it. See http://yargs.js.org/docs/#api-positionalkey-opt
     */
    toYargs(yargs) {
        return yargs.positional(this.name, this.options);
    }
}
