import Enquirer from 'enquirer';
/**
 * Workaround for "The requested module 'enquirer' is a CommonJS module, which
 * may not support all module.exports as named exports."
 */
const prompt = Enquirer.prompt;
/**
 * Creates a new prompter instance
 */
export function prompter(baseArgs, args) {
    return new Prompter(baseArgs, args);
}
export class Prompter {
    constructor(baseArgs, args) {
        this.baseArgs = baseArgs;
        this.args = args;
    }
    async prompt() {
        const questions = this.getQuestions(this.args);
        // Short circuit if there are no questions to ask.
        if (!questions.length) {
            return this.args;
        }
        // Ask questions and merge with passed in args.
        const answers = await prompt(questions);
        return Object.assign(Object.assign({}, this.args), answers);
    }
    getSelectLimit() {
        // Never more than what fits on the screen (+ some padding) or 20
        return Math.min(process.stdout.rows - 3, 20);
    }
    /**
     * Returns an array of arguments and options which should be prompted, because
     * they are promptable (`isPromptable()` returned true) and they are not
     * provided in the args passed in to this function.
     */
    getQuestions(args) {
        // If we need to prompt for things, fill questions array
        return this.baseArgs.reduce((questions, arg) => {
            const name = arg.getName();
            const defaultValue = arg.getDefault();
            const isPromptable = arg.isPromptable();
            const presentInArgs = Object.constructor.hasOwnProperty.call(args, name);
            const isDefault = presentInArgs &&
                typeof defaultValue !== 'undefined' &&
                defaultValue == args[name];
            // We're going to assume that if an argument/option still has its default
            // value and it is promptable, it should get a prompt.
            if (isPromptable && (!presentInArgs || isDefault)) {
                // Detect the type of question we need to ask
                switch (true) {
                    case typeof arg.getChoices() !== 'undefined' &&
                        (arg.getType() === 'array' || Array.isArray(defaultValue)):
                        // Use checkbox question type
                        questions.push({
                            name,
                            type: 'multiselect',
                            message: arg.getPrompt(),
                            initial: defaultValue,
                            choices: arg.getChoices(),
                            limit: this.getSelectLimit(),
                        });
                        break;
                    case typeof arg.getChoices() !== 'undefined':
                        // Use list question type
                        questions.push({
                            name,
                            type: 'autocomplete',
                            message: arg.getPrompt(),
                            initial: defaultValue,
                            choices: arg.getChoices(),
                            limit: this.getSelectLimit(),
                        });
                        break;
                    case arg.getType() === 'boolean' || typeof defaultValue === 'boolean':
                        // Use confirm question type
                        questions.push({
                            name,
                            type: 'confirm',
                            message: arg.getPrompt(),
                            initial: defaultValue,
                        });
                        break;
                    default:
                        // Use input question type as default
                        questions.push({
                            name,
                            type: 'input',
                            message: arg.getPrompt(),
                            initial: defaultValue,
                        });
                }
            }
            return questions;
        }, []);
    }
}
